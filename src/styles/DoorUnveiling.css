Sure, here's an example of how to divide the logic into multiple components in Next.js and React. We can have a MainComponent that includes Door, Ribbon and ProjectorScreen component:

**MainComponent.js**

```javascript
import React from 'react';
import Door from './Door';
import Ribbon from './Ribbon';
import ProjectorScreen from './ProjectorScreen';

const MainComponent = () => {
    return (
        <div id="door-unveiling">
            <Door position={"left"} />
            <Door position={"right"} />
            <Ribbon />
            <ProjectorScreen />
        </div>
    )
}

export default MainComponent;
```

**Door.js**

```javascript
import React from 'react';

const Door = ({ position }) => {
    return (
        <div 
            className={`door ${position === 'right'? 'last-child': ''}`} 
        />
    )
}

export default Door;
```

**Ribbon.js**
```javascript
import React from 'react';

const Ribbon = () => {
    return (
        <div className="red-ribbon" />
    )
}

export default Ribbon;
```

**ProjectorScreen.js**
```javascript
import React from 'react';

const ProjectorScreen = () => {
    return (
        <div className="projector-screen" />
    )
}

export default ProjectorScreen;
```

This allows us to split the logic into multiple files (components) and put them together to make our application work properly. The application remains concise, intuitive, and engaging.

Remember to reuse components whenever possible and encapsulate associated logics and styles in one component for maximum cohesiveness and clarity. The final result is a robust, flexible and maintainable code base.