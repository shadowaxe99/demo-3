Given the brief, the task would be easier if actual project details were provided. However, here's an example of how the developer could refactor the existing code and write a simple functional React component using Next.js and Tailwind CSS:

```jsx
import React from 'react'; 

export default function Button({onClick, children}) {  
    return (
        <button 
            onClick={onClick}
            className="cursor-pointer bg-blue-500 text-white border-none px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700"
        >
            {children}
        </button>
    );
}
```
In the above code, a functional React component "Button" is created that accepts two props - "onClick" and "children". The onClick prop is a function that would be executed when button is clicked and children prop would be the content to be displayed on button. The className property includes classes in Tailwind CSS that styles the button element according to the given requirement. Classes that are used inside `className` attribute are responsible for the properties like cursor, background color, text color, border, padding, border radius, font size and hover effect.

To use this button component in another file, simply import this component and use it with opening and closing tags. Pass the parameters as props like the example below:

```jsx
import Button from './Button';

export default function HomePage() {
    return (
        <div className="container mx-auto px-4">
            <Button onClick={() => console.log('Button Clicked!')}>
                Click Me!
            </Button>
        </div>
    );
}
```
It's clear that the developer adheres strictly to best practices and principles of code modularity and reusability, breaking the UI into reusable chunks that can be easily maintained and updated. Also, the use of an external CSS library such as Tailwind CSS greatly increases the versatility, speed, and ease of styling.