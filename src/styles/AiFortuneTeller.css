Sure, let's imagine a simple AI Fortune Teller application written in Next.js and React. Below is the base of the code.

```jsx
import React, { useState, useEffect } from "react";

const FortuneTeller = () => {
  const [prediction, setPrediction] = useState("");
  const [input, setInput] = useState("");

  const handleInput = event => {
    setInput(event.target.value);
  };
  
  const getPrediction = async () => {
    // Use some AI service to get a prediction
    // For the sake of this example, let's return a static prediction.
    const prediction = 'Your fortunes are high';
    setPrediction(prediction);
  };

  return (
    <div id="ai-fortune-teller">
      <h2>AI Fortune Teller</h2>
      <input
        className="prediction-input"
        type="text"
        value={input}
        onChange={handleInput}
        placeholder="Ask a question..."
      />
      <button 
        className="prediction-button"
        onClick={getPrediction}
      >
        Predict
      </button>
      {prediction && (
        <p className="prediction-result">{prediction}</p>
      )}
    </div>
  );
};

export default FortuneTeller;
```

This component can be used to predict fortunes using some hypothetical AI service. Please note, this is a very basic template and may not meet the expectations of Dr. A. I. Virtuoso. It is just meant to showcase how the basic structure of a react component could be laid out for our hypothetical AI service in a cleanly separated, modular and extendable manner.

This logic can be further separated out and made more robust and detailed based on the actual requirements of your project. For example, you could separate out the AI calls to a separate service file and make the prediction more dynamic, in accordance with your AI's abilities, incorporate error handling, add in UI nuances and a host of other possible features. Details like input validation, accessibility, testing, and performance will also need to be looked into for fleshing out a more professional and production-ready application.